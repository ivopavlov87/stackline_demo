{"version":3,"sources":["components/sidebar.js","components/table.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","productData","className","map","arrayItem","index","key","src","image","alt","subtitle","title","tags","tag","idx","Table","numberWithCommas","x","toString","replace","id","sales","saleWeek","weekEnding","retailSales","wholesaleSales","unitsSold","retailerMargin","date","year","split","day","slice","join","properDate","App","console","log","this","props","Component","connect","state","dispatch","Boolean","window","location","hostname","match","store","createStore","product_data","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"83QAgCeA,G,MA9BC,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YACd,OACE,6BACE,yBAAKC,UAAU,WACb,4BACGD,EAAYE,KAAI,SAACC,EAAWC,GAAZ,OACf,yBAAKC,IAAKD,EAAQ,KAChB,yBACEE,IAAG,UAAKH,EAAUI,OAClBC,IAAG,UAAKL,EAAUM,YAEpB,wBAAIJ,IAAKD,EAAQ,KAAOD,EAAUO,OAClC,wBAAIL,IAAKD,EAAQ,KAAOD,EAAUM,UAClC,wBAAIJ,IAAKD,EAAQ,KACf,4BACGD,EAAUQ,KAAKT,KAAI,SAACU,EAAKC,GAAN,OAClB,wBAAIZ,UAAU,OAAOI,IAAKQ,EAAM,KAC7BD,iBCwCVE,EAzDD,SAAC,GAAqB,IAAnBd,EAAkB,EAAlBA,YAEf,SAASe,EAAiBC,GACxB,OAAOA,EAAEC,WAAWC,QAAQ,wBAAyB,KA+CvD,OACE,yBAAKC,GAAG,SAnCN,+BACE,+BACE,4BACE,2CACA,4CACA,+CACA,0CACA,iDAGHnB,EAAY,GAAGoB,MAAMlB,KAAI,SAACmB,EAAUR,GAAS,IAE1CS,EAKED,EALFC,WACAC,EAIEF,EAJFE,YACAC,EAGEH,EAHFG,eACAC,EAEEJ,EAFFI,UACAC,EACEL,EADFK,eAEF,OACE,2BAAOrB,IAAKQ,EAAM,KAChB,wBAAIR,IAAKQ,EAAM,KACb,4BA/Bd,SAAoBc,GAElB,IAAIC,GADJD,EAAOA,EAAKE,MAAM,MACF,GACZC,EAAMH,EAAK,GAEf,MAAO,CADKA,EAAK,GACFG,EAAKF,EAAKG,MAAM,IAAIC,KAAK,KA0BvBC,CAAWX,IAChB,4BAAK,IAAMP,EAAiBQ,IAC5B,4BAAK,IAAMR,EAAiBS,IAC5B,4BAAKT,EAAiBU,IACtB,4BAAK,IAAMV,EAAiBW,YCrCtCQ,E,iLAMF,OAHAC,QAAQC,IAAIC,KAAKC,MAAMtC,YAAY,IACnCmC,QAAQC,IAAIC,KAAKC,MAAMtC,YAAY,GAAGoB,OAGpC,6BAEE,kBAAC,EAAD,CAASnB,UAAU,UAAUD,YAAaqC,KAAKC,MAAMtC,cAFvD,oBAIE,kBAAC,EAAD,CAAOC,UAAU,QAAQD,YAAaqC,KAAKC,MAAMtC,mB,GAXvCuC,aAoBHC,eACb,SAAAC,GAAK,MAAK,CACRzC,YAAayC,MAEf,SAAAC,GAAQ,MAAK,KAJAF,CAKbN,GCnBkBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCFN,IAAMC,EAAQC,aALd,WAA4C,IAAvBR,EAAsB,uDAAdS,EAE3B,OAAOT,KAKTU,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAEFK,SAASC,eAAe,SD6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.5fd08681.chunk.js","sourcesContent":["import React from 'react';\n\nconst Sidebar = ({productData}) => {\n    return (\n      <div>\n        <div className=\"sidebar\">\n          <ul>\n            {productData.map((arrayItem, index) => (\n              <div key={index + 6000}>\n                <img\n                  src={`${arrayItem.image}`}\n                  alt={`${arrayItem.subtitle}`}\n                ></img>\n                <li key={index + 2000}>{arrayItem.title}</li>\n                <li key={index + 3000}>{arrayItem.subtitle}</li>\n                <li key={index + 4000}>\n                  <ul>\n                    {arrayItem.tags.map((tag, idx) => (\n                      <li className=\"tags\" key={idx + 5000}>\n                        {tag}\n                      </li>\n                    ))}\n                  </ul>\n                </li>\n              </div>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n}\n\nexport default Sidebar;","import React from \"react\";\n\nconst Table = ({ productData }) => {\n\n  function numberWithCommas(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n\n  function properDate(date){\n    date = date.split('-');\n    let year = date[0];\n    let day = date[2];\n    let month = date[1];\n    return [month, day, year.slice(2)].join('-');\n  }\n    \n  function renderTableData() {\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Week Ending</th>\n            <th>Retail Sales</th>\n            <th>Wholesale Sales</th>\n            <th>Units Sold</th>\n            <th>Retailer Margin</th>\n          </tr>\n        </thead>\n        {productData[0].sales.map((saleWeek, idx) => {\n          const {\n            weekEnding,\n            retailSales,\n            wholesaleSales,\n            unitsSold,\n            retailerMargin\n          } = saleWeek; //destructuring\n          return (\n            <tbody key={idx + 7000}>\n              <tr key={idx + 1000}>\n                <td>{properDate(weekEnding)}</td>\n                <td>{\"$\" + numberWithCommas(retailSales)}</td>\n                <td>{\"$\" + numberWithCommas(wholesaleSales)}</td>\n                <td>{numberWithCommas(unitsSold)}</td>\n                <td>{\"$\" + numberWithCommas(retailerMargin)}</td>\n              </tr>\n            </tbody>\n          );\n        })}\n      </table>\n    );\n  };\n\n  return (\n    <div id=\"sales\">\n        {renderTableData()}\n    </div>\n  )\n};\n\nexport default Table;\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport './App.css';\nimport Sidebar from './components/sidebar'\nimport Table from './components/table'\n\nclass App extends Component {\n\n  render() {\n    console.log(this.props.productData[0]); // full array\n    console.log(this.props.productData[0].sales); // full array\n\n    return (\n      <div>\n\n        <Sidebar className='sidebar' productData={this.props.productData} />\n        some random stuff\n        <Table className='table' productData={this.props.productData} />\n\n      </div>\n    );\n  }\n}\n\n\n// giving App.js access to state\nexport default connect(\n  state => ({\n    productData: state\n  }),\n  dispatch => ({})\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport product_data from \"./product_data.json\";\n\n// population of state\nfunction productData(state = product_data) {\n  // Clients is array data\n  return state;\n}\n\nconst store = createStore(productData); // This is reducers\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n// serviceWorker();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}